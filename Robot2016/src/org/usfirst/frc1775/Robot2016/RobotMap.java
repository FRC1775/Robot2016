// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1775.Robot2016;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainLeftController;
    public static SpeedController driveTrainRightController;
    public static RobotDrive driveTrainRobotDrive;
    public static SpeedController throwingArmWinch;
    public static DigitalInput throwingArmWinchLimit;
    public static Solenoid throwingArmReleaseSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftController = new Talon(1);
        LiveWindow.addActuator("DriveTrain", "LeftController", (Talon) driveTrainLeftController);
        
        driveTrainRightController = new Talon(0);
        LiveWindow.addActuator("DriveTrain", "RightController", (Talon) driveTrainRightController);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainLeftController, driveTrainRightController);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        throwingArmWinch = new Talon(4);
        LiveWindow.addActuator("ThrowingArm", "Winch", (Talon) throwingArmWinch);
        
        throwingArmWinchLimit = new DigitalInput(0);
        LiveWindow.addSensor("ThrowingArm", "WinchLimit", throwingArmWinchLimit);
        
        throwingArmReleaseSolenoid = new Solenoid(0, 2);
        LiveWindow.addActuator("ThrowingArm", "ReleaseSolenoid", throwingArmReleaseSolenoid);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
