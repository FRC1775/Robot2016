// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1775.Robot2016;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick.AxisType;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.vision.VisionThread;

import java.util.ArrayList;

import org.opencv.core.MatOfPoint;
import org.opencv.core.Rect;
import org.opencv.imgproc.Imgproc;
import org.usfirst.frc1775.Robot2016.commands.*;
import org.usfirst.frc1775.Robot2016.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static ThrowingArm throwingArm;
    public static GrabbingArm grabbingArm;
    
    private static final int IMG_WIDTH = 320;
    private static final int IMG_HEIGHT = 240;
    
    private VisionThread visionThread;
    private double centerX = 0.0;
    
    private final Object imgLock = new Object();
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	UsbCamera camera = CameraServer.getInstance().startAutomaticCapture();
    	camera.setResolution(IMG_WIDTH, IMG_HEIGHT);
    	//camera.setWhiteBalanceAuto();
    	//camera.setExposureManual(5);
    	//camera.
    	//camera.setWhiteBalanceAuto();
    	//camera.setBrightness(10);
        
        visionThread = new VisionThread(camera, new GripPipeline(), pipeline -> {
            if (!pipeline.filterContoursOutput().isEmpty()) {
            	ArrayList<MatOfPoint> contours = pipeline.filterContoursOutput();
            	DriverStation.reportError("Count: " + contours.size(), false);
            	MatOfPoint contour = contours.get(0);
                Rect r = Imgproc.boundingRect(contour);
                
                synchronized (imgLock) {
                	// 0.45 => 20/44.5" calibration of frame view from 47"
                	// 0.884 is view angle in radians
                	// Calculate angle by ratio of screen to ratio of view angle
                	double anglularDiameter = (0.884 * (r.width / (double)IMG_WIDTH)) / 0.45;
                	// Use angular diameter equation solving for D (distance to object)
                	double distance = 20.0 / Math.tan(anglularDiameter / 2.0);
                	DriverStation.reportError("Distance: " + distance, false);
                	
                    centerX = r.x + (r.width / 2);
                    double opp = IMG_WIDTH / 2 - centerX;
                    // Calculate angle of robot to target by using ratio of 1/2 view angle compared to percentage of screen width
                    // between center of frame and center of target
                    double angle = 180.0/Math.PI * ((0.442 * (opp / (double)IMG_WIDTH)) / 0.45);
                    DriverStation.reportError("Angle: " + angle, false);
                }
            }
        });
        visionThread.start();
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        throwingArm = new ThrowingArm();
        grabbingArm = new GrabbingArm();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
    	double drive = oi.joystick1.getRawAxis(1);
    	double rotate = oi.joystick1.getRawAxis(4);
    	System.out.println("Drive: " + drive);
    	if (drive <= 0.05 || drive >= -0.05) {
    		driveTrain.getRobotDrive().arcadeDrive(drive, rotate, true);
    	} else {
    		driveTrain.getRobotDrive().arcadeDrive(drive, rotate * -drive, true);
    	}
        double centerX;
    	synchronized (imgLock) {
    		centerX = this.centerX;
    	}
    	DriverStation.reportError("CenterX: " + centerX, false);
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
